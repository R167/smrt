#!/usr/bin/env python

import socket, time, random, argparse, logging
from protocol import Protocol

def main():
    capture = [
b"\x5d\x75\xb2\x09\x6a\xdd" \
b"\xd3\xd7\x6b\x8d\xbc\x14\x6d\x7b\x7f\xbd\x42\x2b\xa2\xf5\xd7\x87" \
b"\xae\xed\x50\x8f\x63\x5c\xc2\x02\x90\x9a\x52\x12\x81\xc6\xd8\xd5" \
b"\x2b\x36",

b"\x5d\x76\xb2\x09\x6a\xdd" \
b"\xd3\xd7\x6b\x8d\xbc\x14\x6d\x7b\x7f\xbd\x42\x2b\xa2\xf5\xd7\x8b" \
b"\xae\xed\x50\x8f\x7f\xb7\xc2\x02\x90\x9a\xa4\xec\x81\xc6",

b"\x5d\x77\xb2\x09\x6a\xdd" \
b"\xd3\xd7\x6b\x8d\xbc\x14\x6d\x7b\x7f\xbc\x42\x2b\xa2\xf5\xd7\xe3" \
b"\xae\xed\x50\x8f\x7f\xb7\xc2\x02\x90\x9a\x59\x13\x81\xc0\x46\x4e" \
b"\x46\x5f\x27\xd9\x42\xb5\xa4\x46\x08\x40\x34\x18\x22\x2a\x5d\x4f" \
b"\x9b\x67\x38\x1e\x76\x08\x73\x71\xf2\x9b\x54\xbe\x89\xd9\xc8\x91" \
b"\x5a\xb3\x73\xda\x4c\x00",

b"\x5d\x70\xb2\x09\x6a\xdd" \
b"\xd3\xd7\x6b\x8d\xbc\x14\x6d\x7b\x7f\xbc\x42\x2b\xa2\xf5\xd7\x00" \
b"\xae\xed\x50\x8f\x7f\xb7\xc2\x02\x90\x9a\x79\x13\x81\xc7\x26\x08" \
b"\x2a\x36\x5b\xd9\x41\xb7\xa4\x40\x69\x24\x59\x71\x4c\x6e\x1a\x28" \
b"\xfa\x02\x54\x60\x76\x2a\x72\xe1\xe2\x9b\x56\x2e\xfd\xbc\x1b\xe5" \
b"\x68\xb3\x0c\x75\x24\x6f\x49\x44\x2a\x92\xab\x86\xfc\xa4\xd4\x12" \
b"\xf1\xc0\x16\x83\x9f\x9a\x2c\xfa\x99\x3a\x62\x90\x19\x59\xb8\xb3" \
b"\x82\xdf\x2e\xe6\xe5\xf9\x54\x80\x85\x09\xce\x81\xc6\xb0\x6e\xf7" \
b"\xba\xe8\x86\xb2\x52\xb6\x96\xd7\xfd\x73\xe1\xf9\x8f\xc0\xa5\x50" \
b"\x2e\xec\xe6\x97\xc1\x74\xf9\x71\xdc\x89\xa8\xbb\x6f\xd2\x47\xf1" \
b"\x77\x7c\xd8\x70\xb7\xf7\xad\x06\xa2\xe2\x9b\x5c\x69\xc8\xf1\x0d" \
b"\xc1\x58\x72\xa1\xb2\x5a\x31\x04\xdc"
]
    for s in capture:
        data = Protocol.decode(s)
        print(Protocol.analyze(data))

#    net = Network(args.ip_address, args.host_mac, args.switch_mac)
#    net.login(args.username, args.password)
#    actions = Protocol.tp_ids
#    v = Protocol.set_vlan(10, 255, 254, "pipo")
#
#    if args.action in actions:
#        header, payload = net.query(Protocol.GET, {actions[args.action]: b''})
#        print(*payload, sep="\n")
#    else:
#        print("Actions:" , *actions.keys())
#    header, payload = net.query(Protocol.SET, {actions[args.action]: v})

if __name__ == "__main__":
    main()
